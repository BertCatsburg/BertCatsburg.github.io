"use strict";(self.webpackChunkdocusaurus_bertcatsburg=self.webpackChunkdocusaurus_bertcatsburg||[]).push([[572],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>s});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),m=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(i.Provider,{value:n},e.children)},_="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),_=m(t),d=r,s=_["".concat(i,".").concat(d)]||_[d]||c[d]||l;return t?a.createElement(s,o(o({ref:n},p),{},{components:t})):a.createElement(s,o({ref:n},p))}));function s(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var u={};for(var i in n)hasOwnProperty.call(n,i)&&(u[i]=n[i]);u.originalType=e,u[_]="string"==typeof e?e:r,o[1]=u;for(var m=2;m<l;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3013:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>u,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const l={sidebar_position:6},o="All Code",u={unversionedId:"terraform-list-and-map/all-code",id:"terraform-list-and-map/all-code",title:"All Code",description:"Root Module : main.tf",source:"@site/docs/terraform-list-and-map/06-all-code.mdx",sourceDirName:"terraform-list-and-map",slug:"/terraform-list-and-map/all-code",permalink:"/docs/terraform-list-and-map/all-code",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Recap",permalink:"/docs/terraform-list-and-map/recap"}},i={},m=[{value:"Root Module : main.tf",id:"root-module--maintf",level:2},{value:"module_list_element/main.tf",id:"module_list_elementmaintf",level:2},{value:"module_map_element/main.tf",id:"module_map_elementmaintf",level:2},{value:"module_listofmap/main.tf",id:"module_listofmapmaintf",level:2},{value:"Deployment",id:"deployment",level:2}],p={toc:m},_="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(_,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"all-code"},"All Code"),(0,r.kt)("h2",{id:"root-module--maintf"},"Root Module : main.tf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'# **** MAP\nvariable "MAP_1" {\n  type = map(string)\n  default = {\n    keyA = "ValueA"\n    keyB = "ValueB"\n    keyC = "ValueC"\n  }\n}\n\noutput "OUT_MAP_1" {\n  value = var.MAP_1["keyC"]\n}\n\noutput "OUT_MAP_1_ALL_VALUES" {\n  value = var.MAP_1\n}\n\n# **** MAP, but now per Element in the Map\nmodule "MAP_PER_ELEMENT" {\n  source          = "./module_map_element"\n  for_each        = var.MAP_1\n  mapElementKey   = each.key\n  mapElementValue = each.value\n}\n\noutput "MODULE_MAP_ELEMENT_OUTPUT" {\n  value = module.MAP_PER_ELEMENT\n}\n\nresource "null_resource" "this" {\n  for_each = var.MAP_1\n  xx = each.key\n}\n\n# **** LIST\nvariable "LIST_1" {\n  type = list(string)\n  default = [\n    "ValueA",\n    "ValueB",\n    "ValueC"\n  ]\n}\n\noutput "OUT_LIST_1_INDEX_2" {\n  value = var.LIST_1[2]\n}\n\noutput "OUT_LIST_1_ALL_VALUES_IN_A_FOR" {\n  value = [for i in var.LIST_1 : i]\n}\n\noutput "OUT_LIST_1_ALL_VALUES" {\n  value = var.LIST_1\n}\n\n# **** LIST, but now per element in the list\nmodule "MODULE_LIST" {\n  source       = "./module_list_element"\n  count        = length(var.LIST_1)\n  LIST_ELEMENT = var.LIST_1[count.index]\n}\n\noutput "MODULE_LIST_ELEMENT_OUTPUT" {\n  value = module.MODULE_LIST\n}\noutput "MODULE_LIST_ELEMENT_OUTPUT_SECOND_VALUE" {\n  value = module.MODULE_LIST[2].MODULE_LIST_ELEMENT_OUTPUT\n}\noutput "MODULE_LIST_ELEMENT_OUTPUT_ALL_IN_LIST" { # Return all values in a list\n  value = module.MODULE_LIST[*].MODULE_LIST_ELEMENT_OUTPUT\n}\n\n\n# **** LIST of Maps\nvariable "LIST_OF_MAPS" {\n  type = list(map(string))\n  default = [\n    {\n      city = "Amsterdam"\n      country = "Netherlands"\n    },\n    {\n      city = "New York"\n      country = "United States of America"\n    },\n    {\n      city = "London"\n      country = "United Kingdom"\n    }\n  ]\n}\n\n# ** Get \'country\' of second element\noutput "LISTMAP_COUNTRY_OF_ELEMENT_2" {\n  value = var.LIST_OF_MAPS[1].country\n}\noutput "LISTMAP_ALL_COUNTRIES_1" {\n  value = [for i in var.LIST_OF_MAPS: i.country]\n}\noutput "LISTMAP_ALL_COUNTRIES_2" {\n  value = var.LIST_OF_MAPS.*.country\n}\n\n# ** LIST of MAPS in a Module\nmodule "LIST_OF_MAPS" {\n  source = "./module_listofmap"\n  count = length(var.LIST_OF_MAPS)\n  LISTOFMAP_ELEMENT = var.LIST_OF_MAPS[count.index]\n}\n\noutput "ALL_COUNTRIES" {\n  value = module.LIST_OF_MAPS[*].COUNTRY\n}\n')),(0,r.kt)("h2",{id:"module_list_elementmaintf"},"module_list_element/main.tf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'variable "LIST_ELEMENT" {\n  type = string\n}\n\noutput "MODULE_LIST_ELEMENT_OUTPUT" {\n  value = var.LIST_ELEMENT\n}\n')),(0,r.kt)("h2",{id:"module_map_elementmaintf"},"module_map_element/main.tf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'variable "mapElementKey" {\n  type = string\n}\n\nvariable "mapElementValue" {\n  type = string\n}\n\noutput "MODULE_MAP_ELEMENT_OUTPUT" {\n  value = "${var.mapElementKey} = ${var.mapElementValue}"\n}\n')),(0,r.kt)("h2",{id:"module_listofmapmaintf"},"module_listofmap/main.tf"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'variable "LISTOFMAP_ELEMENT" {\n  type = map(string)\n}\n\noutput "COUNTRY" {\n  value = var.LISTOFMAP_ELEMENT.country\n}\n')),(0,r.kt)("h2",{id:"deployment"},"Deployment"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create new directory")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir terraformlistandmap\n$ cd terraformlistandmap\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create file main.tf in that directory"),(0,r.kt)("li",{parentName:"ul"},"create subdirectories for the modules")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir module_listofmap module_map_element module_list_element\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create all the main.tf files in those subdirectories"),(0,r.kt)("li",{parentName:"ul"},"run terraform init")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ terraform init\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"apply the configuration and see the output")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ terraform apply --auto-aprove\n")))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocusaurus_bertcatsburg=self.webpackChunkdocusaurus_bertcatsburg||[]).push([[499],{3905:(e,t,l)=>{l.d(t,{Zo:()=>p,kt:()=>h});var n=l(7294);function r(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function a(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function o(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?a(Object(l),!0).forEach((function(t){r(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):a(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function u(e,t){if(null==e)return{};var l,n,r=function(e,t){if(null==e)return{};var l,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||(r[l]=e[l]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)l=a[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(r[l]=e[l])}return r}var i=n.createContext({}),s=function(e){var t=n.useContext(i),l=t;return e&&(l="function"==typeof e?e(t):o(o({},t),e)),l},p=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var l=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(l),m=r,h=d["".concat(i,".").concat(m)]||d[m]||c[m]||a;return l?n.createElement(h,o(o({ref:t},p),{},{components:l})):n.createElement(h,o({ref:t},p))}));function h(e,t){var l=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=l.length,o=new Array(a);o[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u[d]="string"==typeof e?e:r,o[1]=u;for(var s=2;s<a;s++)o[s]=l[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,l)}m.displayName="MDXCreateElement"},9801:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>u,toc:()=>s});var n=l(7462),r=(l(7294),l(3905));const a={sidebar_position:3},o="Terraform List",u={unversionedId:"terraform-list-and-map/list",id:"terraform-list-and-map/list",title:"Terraform List",description:"All code below also in the main.tf in the root module, unless stated otherwise.",source:"@site/docs/terraform-list-and-map/03-list.mdx",sourceDirName:"terraform-list-and-map",slug:"/terraform-list-and-map/list",permalink:"/docs/terraform-list-and-map/list",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Terraform Map",permalink:"/docs/terraform-list-and-map/map"},next:{title:"Terraform List Of Maps",permalink:"/docs/terraform-list-and-map/list-of-maps"}},i={},s=[{value:"List we use",id:"list-we-use",level:2},{value:"Get the second element value from the List",id:"get-the-second-element-value-from-the-list",level:2},{value:"Output",id:"output",level:4},{value:"Get all values from the List",id:"get-all-values-from-the-list",level:2},{value:"Output",id:"output-1",level:4},{value:"Get all values from the list, without &#39;for&#39;",id:"get-all-values-from-the-list-without-for",level:2},{value:"Output",id:"output-2",level:4},{value:"Per Element (in a Module)",id:"per-element-in-a-module",level:2},{value:"Calling the Module",id:"calling-the-module",level:3},{value:"(Intermezzo) : Why not for_each?",id:"intermezzo--why-not-for_each",level:4},{value:"Back to our Module",id:"back-to-our-module",level:4},{value:"Show the output for the module, all occurrences",id:"show-the-output-for-the-module-all-occurrences",level:3},{value:"Output",id:"output-3",level:4},{value:"Return the value of the second object in the list",id:"return-the-value-of-the-second-object-in-the-list",level:3},{value:"Output",id:"output-4",level:4},{value:"Return all values in a list",id:"return-all-values-in-a-list",level:3},{value:"Output",id:"output-5",level:4}],p={toc:s},d="wrapper";function c(e){let{components:t,...l}=e;return(0,r.kt)(d,(0,n.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"terraform-list"},"Terraform List"),(0,r.kt)("p",null,"All code below also in the main.tf in the root module, unless stated otherwise."),(0,r.kt)("h2",{id:"list-we-use"},"List we use"),(0,r.kt)("p",null,"The List we are working with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'variable "LIST_1" {\n  type = list(string)\n  default = [\n    "ValueA",\n    "ValueB",\n    "ValueC"\n  ]\n}\n')),(0,r.kt)("h2",{id:"get-the-second-element-value-from-the-list"},"Get the second element value from the List"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'output "OUT_LIST_1_INDEX_2" {\n  value = var.LIST_1[2]\n}\n')),(0,r.kt)("h4",{id:"output"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'OUT_LIST_1_INDEX_2 = "ValueC"\n')),(0,r.kt)("h2",{id:"get-all-values-from-the-list"},"Get all values from the List"),(0,r.kt)("p",null,"Here we use a loop in the value."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'output "OUT_LIST_1_ALL_VALUES_IN_A_FOR" {\n  value = [for i in var.LIST_1 : i]\n}\n')),(0,r.kt)("h4",{id:"output-1"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'OUT_LIST_1_ALL_VALUES_IN_A_FOR = [\n  "ValueA",\n  "ValueB",\n  "ValueC",\n]\n')),(0,r.kt)("p",null,"We're getting a nice list here."),(0,r.kt)("h2",{id:"get-all-values-from-the-list-without-for"},"Get all values from the list, without 'for'"),(0,r.kt)("p",null,"Well, what happens if we don't use the 'for' loop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'output "OUT_LIST_1_ALL_VALUES" {\n  value = var.LIST_1\n}\n')),(0,r.kt)("h4",{id:"output-2"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'OUT_LIST_1_ALL_VALUES = tolist([\n  "ValueA",\n  "ValueB",\n  "ValueC",\n])\n')),(0,r.kt)("h2",{id:"per-element-in-a-module"},"Per Element (in a Module)"),(0,r.kt)("p",null,"As we did for the Map, lets create a Module in which we process each element of the List."),(0,r.kt)("h3",{id:"calling-the-module"},"Calling the Module"),(0,r.kt)("p",null,"In the root  module main.tf file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'module "MODULE_LIST" {\n  source       = "./module_list_element"\n  count        = length(var.LIST_1)\n  LIST_ELEMENT = var.LIST_1[count.index]\n}\n')),(0,r.kt)("p",null,"Since this is a list, we call the module as many times as we have elements in the list.\nAnd that is done with a 'count' which is given a value of the length of the list."),(0,r.kt)("p",null,"It's like in Javascript:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"for (let i = 0; i < LIST_1.length; i++) {\n}\n")),(0,r.kt)("p",null,"The variable which we send to the module, called LIST_ELEMENT, passes the index of that counter."),(0,r.kt)("h4",{id:"intermezzo--why-not-for_each"},"(Intermezzo) : Why not for_each?"),(0,r.kt)("p",null,"Well, for_each does not work on Lists.\nIf you try the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'module "MODULE_LIST_2" {\n  source       = "./module_list_element"\n  for_each = var.LIST_1\n  LIST_ELEMENT = each.key\n}\n')),(0,r.kt)("p",null,"You will get a nice error saying:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'The given "for_each" argument value is unsuitable:\nthe "for_each" argument must be a map, or set of strings,\nand you have provided a value of type list of string.\n')),(0,r.kt)("h4",{id:"back-to-our-module"},"Back to our Module"),(0,r.kt)("p",null,"The Module definition looks like this: (located in ./module_list_element/main.tf)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'variable "LIST_ELEMENT" {\n  type = string\n}\n\noutput "MODULE_LIST_ELEMENT_OUTPUT" {\n  value = var.LIST_ELEMENT\n}\n')),(0,r.kt)("p",null,"It receives a LIST_ELEMENT and sends back that same LIST_ELEMENT in an output called MODULE_LIST_ELEMENT_OUTPUT."),(0,r.kt)("h3",{id:"show-the-output-for-the-module-all-occurrences"},"Show the output for the module, all occurrences"),(0,r.kt)("p",null,"We can do various outputs with that Module"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'output "MODULE_LIST_ELEMENT_OUTPUT" {\n  value = module.MODULE_LIST\n}\n')),(0,r.kt)("h4",{id:"output-3"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'MODULE_LIST_ELEMENT_OUTPUT = [\n  {\n    "MODULE_LIST_ELEMENT_OUTPUT" = "ValueA"\n  },\n  {\n    "MODULE_LIST_ELEMENT_OUTPUT" = "ValueB"\n  },\n  {\n    "MODULE_LIST_ELEMENT_OUTPUT" = "ValueC"\n  },\n]\n')),(0,r.kt)("h3",{id:"return-the-value-of-the-second-object-in-the-list"},"Return the value of the second object in the list"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'output "MODULE_LIST_ELEMENT_OUTPUT_SECOND_VALUE" {\n  value = module.MODULE_LIST[2].MODULE_LIST_ELEMENT_OUTPUT\n}\n')),(0,r.kt)("h4",{id:"output-4"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'MODULE_LIST_ELEMENT_OUTPUT_SECOND_VALUE = "ValueC"\n')),(0,r.kt)("h3",{id:"return-all-values-in-a-list"},"Return all values in a list"),(0,r.kt)("p",null,"This is called a 'splat' expression in Terraform"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'output "MODULE_LIST_ELEMENT_OUTPUT_ALL_IN_LIST" {\n  value = module.MODULE_LIST[*].MODULE_LIST_ELEMENT_OUTPUT\n}\n')),(0,r.kt)("p",null,"The earlier versions of Terraform a deprecated form of the Splat expression was without the bracket."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"module.MODULE_LIST.*.MODULE_LIST_ELEMENT_OUTPUT\n")),(0,r.kt)("p",null,"It's advised not to use that anymore."),(0,r.kt)("h4",{id:"output-5"},"Output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'MODULE_LIST_ELEMENT_OUTPUT_ALL_IN_LIST = [\n  "ValueA",\n  "ValueB",\n  "ValueC",\n]\n')))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocusaurus_bertcatsburg=self.webpackChunkdocusaurus_bertcatsburg||[]).push([[977],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=o,m=p["".concat(l,".").concat(h)]||p[h]||u[h]||i;return n?r.createElement(m,a(a({ref:t},d),{},{components:n})):r.createElement(m,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1257:(e,t,n)=>{n.d(t,{r:()=>o,I:()=>a});var r=n(7294);const o=e=>r.createElement("a",{href:e.to,target:"_blank"},e.children),i=[{description:"smiling face with open mouth",value:"\ud83d\ude03"},{description:"winking face",value:"\ud83d\ude09"},{description:"face with stuck-out tongue and winking eye",value:"\ud83d\ude1c"},{description:"astonished face",value:"\ud83d\ude32"},{description:"white heavy check mark",value:"\u2705"}],a=e=>{const t=i.find((t=>t.description===e.description));return t?t.value:null}},8159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));n(1257);const i={sidebar_position:4},a="Setting up a Static Website",s={unversionedId:"nginx-in-docker/static-website",id:"nginx-in-docker/static-website",title:"Setting up a Static Website",description:"There are 2 methods to get a second static website up and running",source:"@site/docs/nginx-in-docker/04-static-website.mdx",sourceDirName:"nginx-in-docker",slug:"/nginx-in-docker/static-website",permalink:"/docs/nginx-in-docker/static-website",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Running Nginx in Docker",permalink:"/docs/nginx-in-docker/first-run"},next:{title:"Domainnames and SSL",permalink:"/docs/nginx-in-docker/dns-and-ssl"}},l={},c=[{value:"Why the extra webserver?",id:"why-the-extra-webserver",level:2},{value:"Set up directories",id:"set-up-directories",level:2},{value:"Create the website",id:"create-the-website",level:2},{value:"Get a simple webserver",id:"get-a-simple-webserver",level:2},{value:"Add the second site to the Proxyserver",id:"add-the-second-site-to-the-proxyserver",level:2},{value:"Oh no, not port 7777 !!",id:"oh-no-not-port-7777-",level:2},{value:"The new default.conf in staticsite directory",id:"the-new-defaultconf-in-staticsite-directory",level:3},{value:"Define the domain name",id:"define-the-domain-name",level:2},{value:"Test the site",id:"test-the-site",level:2},{value:"Restart the Proxyserver",id:"restart-the-proxyserver",level:2},{value:"Show results",id:"show-results",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...i}=e;return(0,o.kt)(p,(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"setting-up-a-static-website"},"Setting up a Static Website"),(0,o.kt)("p",null,"There are 2 methods to get a second static website up and running"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let the proxyserver point to another directory where the other site resides. (Simple solution)"),(0,o.kt)("li",{parentName:"ul"},"Create a completely different container with a webserver pointing to the second website (Complex solution)")),(0,o.kt)("p",null,"Let's go for the complex solution,\njust for the fun of it,\nand to show the independence of the web applications and the proxyserver."),(0,o.kt)("h2",{id:"why-the-extra-webserver"},"Why the extra webserver?"),(0,o.kt)("p",null,"Well, the only thing the Proxyserver does is get all incoming traffic, check for which domainname this is, and send the request on to the appropriate Docker Container."),(0,o.kt)("p",null,"If this Docker Container only has a bunch of HTML files, it cannot do anything."),(0,o.kt)("p",null,"So, every Docker Container should be able to handle incomgin traffic. This is done by either:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"A NodeJS Server if you have a NodeJS API running"),(0,o.kt)("li",{parentName:"ul"},"An Uvicorn Server in case you have a Python FastAPI running"),(0,o.kt)("li",{parentName:"ul"},"Or a small webserver if you have only a bunch of HTML files (like a static website or the result of a ReactJS-Build)")),(0,o.kt)("p",null,"This part of the tutorial does the last bullet, since it's the simplest one."),(0,o.kt)("h2",{id:"set-up-directories"},"Set up directories"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cd deployProject\nmkdir -p staticwebsite/site\n")),(0,o.kt)("h2",{id:"create-the-website"},"Create the website"),(0,o.kt)("p",null,"In ",(0,o.kt)("strong",{parentName:"p"},"deployProject/staticwebsite/site/index.html")," create some simple HTML"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<html lang="en">\n<head>\n    <title>Static Site</title>\n</head>\n<body>\n    <h3>Static Website</h3>\n</body>\n</html>\n')),(0,o.kt)("p",null,"Obviously this is too simple.\nBut think of this as a ReactJS website you build\n(unless it needs Server Side Rendering, in that case you need a NodeJS Server)"),(0,o.kt)("h2",{id:"get-a-simple-webserver"},"Get a simple webserver"),(0,o.kt)("p",null,"We will use Nginx for that. The defaults for the Nginx Docker Container are sufficient for our Static Site."),(0,o.kt)("p",null,"Realise that this is a different Nginx. A bunch of HTML files do not have Webserver functionality like a NodeJS Application.\nSo, there needs to be something serving those webpages."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Nginx for the Static Website",src:n(8582).Z,width:"551",height:"354"})),(0,o.kt)("p",null,"Below is the docker-compose.yml file which resides in ",(0,o.kt)("strong",{parentName:"p"},"deployProject/staticwebsite/docker-compose.yml")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yml"},"version: '3.9'\n\nservices:\n\n  proxyserver:\n    image: nginx:1.21.4\n    container_name: staticsite\n    working_dir: /usr/share/nginx/html\n    volumes:\n      - ./site:/usr/share/nginx/html:ro\n      - ./deployment/etc/nginx/conf.d:/etc/nginx/conf.d:ro\n    networks:\n      my-net:\n        ipv4_address: 172.30.0.20\n\nnetworks:\n  my-net:\n    external: true\n    name: my-net\n")),(0,o.kt)("p",null,"Notice that there is no need for a Ports section in the docker-compose file.\nThe container is not directly accessible from the Host\nbut only via the Proxyserver via the IP Address in the Proxyserver Nginx configuration."),(0,o.kt)("p",null,"If we would take all the Nginx defaults, then we would not need a mapping to the ",(0,o.kt)("strong",{parentName:"p"},"/etc/nginx/conf.d"),",\nbut we're going to do something fun with ports."),(0,o.kt)("h2",{id:"add-the-second-site-to-the-proxyserver"},"Add the second site to the Proxyserver"),(0,o.kt)("p",null,"To be clear: This is the Proxyserver routing traffic to the Static Website Webserver."),(0,o.kt)("p",null,"Add the snippet below in ",(0,o.kt)("strong",{parentName:"p"},"deployProject/proxyserver/deployment/etc/nginx/conf.d/default.conf"),"\nor create a new file (called ",(0,o.kt)("strong",{parentName:"p"},"static.website.conf"),") in the same directory."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"server {\n    listen 80;\n    server_name www.mydomain.com;\n\n    access_log      /var/log/nginx/www_mydomain_access.log  main;\n    error_log       /var/log/nginx/www_mydomain_error.log;\n\n    location / {\n        proxy_pass      http://172.30.0.20:7777;\n    }\n}\n")),(0,o.kt)("p",null,"It shows that our Proxyserver forwards all requests on port 80 and domain ",(0,o.kt)("a",{parentName:"p",href:"http://www.mydomain.com"},"www.mydomain.com")," to port 7777 on IP number 172.30.0.20."),(0,o.kt)("p",null,"So, we need something listening on IP 172.30.0.20 port 7777. Let's fix that."),(0,o.kt)("h2",{id:"oh-no-not-port-7777-"},"Oh no, not port 7777 !!"),(0,o.kt)("p",null,"If we took the default port 80 of Nginx, then we would almost be ready.\nBut since some fool had the idea to use a port 7777 for the Static Website Server, we need to do some extra steps."),(0,o.kt)("p",null,"(It makes things clear if you don't take he defaults all the time)"),(0,o.kt)("p",null,"The Nginx config, delivered to you in the Nginx standard Docker Image, creates a default.conf with port 80.\nWe need to overwrite that:"),(0,o.kt)("h3",{id:"the-new-defaultconf-in-staticsite-directory"},"The new default.conf in staticsite directory"),(0,o.kt)("p",null,"As mentioned, our Static Website needs a Webserver. The config for that Webserver is this default.conf"),(0,o.kt)("p",null,"Put this in ",(0,o.kt)("strong",{parentName:"p"},"deployProject/staticsite/deployment/etc/nginx/conf.d/default.conf")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"server {\n    listen       7777;\n    server_name  localhost;\n\n    location / {\n        root   /usr/share/nginx/html;\n        index  index.html index.htm;\n    }\n}\n")),(0,o.kt)("p",null,"It says:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Hey, I'm a Nginx webserver,"),(0,o.kt)("li",{parentName:"ul"},"and I'm listening on port 7777 on localhost."),(0,o.kt)("li",{parentName:"ul"},"Any requests will be taken from /usr/share/nginx/html (which is Nginx default)")),(0,o.kt)("h2",{id:"define-the-domain-name"},"Define the domain name"),(0,o.kt)("p",null,"The domainname for this Static Site is ",(0,o.kt)("a",{parentName:"p",href:"http://www.mydomain.com/"},"http://www.mydomain.com/")),(0,o.kt)("p",null,"Since you probably are not the owner of 'mydomain.com', the domainname will be defined in the ",(0,o.kt)("strong",{parentName:"p"},"/etc/hosts")," file on the Host (OSX in this case).\nBut it is the same as specifying a domainname on a DNS Provider like GoDaddy."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"127.0.0.1   www.mydomain.com\n")),(0,o.kt)("p",null,"The website is located on the Host.\nThis means that a request on the Host to ",(0,o.kt)("a",{parentName:"p",href:"http://www.mydomain.com"},"www.mydomain.com")," must\nbe picked up by something listening to port 80 on localhost.\nWell, that is the ProxyServer we already have running. And the Proxyserver will pass it on to IP address 172.30.0.20 on port 7777."),(0,o.kt)("h2",{id:"test-the-site"},"Test the site"),(0,o.kt)("p",null,"We need to start the container for this Static Website"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ cd deployProject/staticsite\n$ docker-compose up -d\n[+] Running 1/1\n \u283f Container staticsite  Started           0.4s\n")),(0,o.kt)("h2",{id:"restart-the-proxyserver"},"Restart the Proxyserver"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ cd deployProject/proxyserver\n\n$ docker-compose down\n[+] Running 1/1\n \u283f Container proxyserver  Removed\n\n$ docker-compose up -d\n[+] Running 1/1\n \u283f Container proxyserver  Started\n\n\n$ docker ps -a\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS              PORTS                NAMES\nc7e9df08a67c   nginx:1.21.4   "/docker-entrypoint.\u2026"   4 seconds ago   Up 3 seconds        0.0.0.0:80->80/tcp   proxyserver\n9a63a1ed1465   nginx:1.21.4   "/docker-entrypoint.\u2026"   2 minutes ago   Up About a minute   80/tcp               staticsite\n')),(0,o.kt)("p",null,'And now you see something strange: The staticsite has "80/tcp" in the Ports column.'),(0,o.kt)("p",null,"The reason is that the Nginx Image itself ",(0,o.kt)("strong",{parentName:"p"},"Exposes")," port 80. But this is ignored in our setup.\nAnd inside the Docker Container there is nothing listening to port 80 because our Nginx default.conf was rewritten to listen to port 7777."),(0,o.kt)("h2",{id:"show-results"},"Show results"),(0,o.kt)("p",null,"Start up a browser and go to ",(0,o.kt)("a",{parentName:"p",href:"http://www.mydomain.com/"},"http://www.mydomain.com/")),(0,o.kt)("p",null,'You should see your "Static Website".'))}u.isMDXComponent=!0},8582:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/static-site-webserver-2bc84dffb19f18145469e8540748144a.png"}}]);
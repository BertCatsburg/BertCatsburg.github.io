"use strict";(self.webpackChunkdocusaurus_bertcatsburg=self.webpackChunkdocusaurus_bertcatsburg||[]).push([[479],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),p=s,m=u["".concat(l,".").concat(p)]||u[p]||h[p]||o;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1257:(e,t,n)=>{n.d(t,{r:()=>s,I:()=>r});var a=n(7294);const s=e=>a.createElement("a",{href:e.to,target:"_blank"},e.children),o=[{description:"smiling face with open mouth",value:"\ud83d\ude03"},{description:"winking face",value:"\ud83d\ude09"},{description:"face with stuck-out tongue and winking eye",value:"\ud83d\ude1c"},{description:"astonished face",value:"\ud83d\ude32"},{description:"white heavy check mark",value:"\u2705"}],r=e=>{const t=o.find((t=>t.description===e.description));return t?t.value:null}},2545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7462),s=(n(7294),n(3905)),o=n(1257);const r={sidebar_position:6},i="Databases",l={unversionedId:"nginx-in-docker/database",id:"nginx-in-docker/database",title:"Databases",description:"Remember this picture?",source:"@site/docs/nginx-in-docker/06-database.mdx",sourceDirName:"nginx-in-docker",slug:"/nginx-in-docker/database",permalink:"/docs/nginx-in-docker/database",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Domainnames and SSL",permalink:"/docs/nginx-in-docker/dns-and-ssl"},next:{title:"Conclusion",permalink:"/docs/nginx-in-docker/conclusion"}},c={},d=[{value:"docker-compose.yml for mysql",id:"docker-composeyml-for-mysql",level:2},{value:"MYSQL Environment variables",id:"mysql-environment-variables",level:3},{value:"Security",id:"security",level:3},{value:"Ports",id:"ports",level:3},{value:"Starting the MySQL Container",id:"starting-the-mysql-container",level:2},{value:"Deleting a Database?",id:"deleting-a-database",level:4},{value:"Network",id:"network",level:3},{value:"Showing results",id:"showing-results",level:2},{value:"Different methods to access the database",id:"different-methods-to-access-the-database",level:2},{value:"Accessing the database on the Host",id:"accessing-the-database-on-the-host",level:3},{value:"Accessing the database via an SSH Tunnel",id:"accessing-the-database-via-an-ssh-tunnel",level:3},{value:"Accessing the database via the Proxyserver",id:"accessing-the-database-via-the-proxyserver",level:3},{value:"Use phpmyadmin",id:"use-phpmyadmin",level:3}],u={toc:d},h="wrapper";function p(e){let{components:t,...r}=e;return(0,s.kt)(h,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"databases"},"Databases"),(0,s.kt)("p",null,"Remember this picture?"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Database Overview",src:n(9686).Z,width:"672",height:"378"})),(0,s.kt)("p",null,"Several of our Docker Containers will be talking to a database. and this database also needs to run in a Docker Container."),(0,s.kt)("p",null,"Let's start with spinning up a Docker Container with a MySQL Database."),(0,s.kt)("p",null,"Create a new directory next to ProxyServer called 'mysql'. In there create a directory called 'database'."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"cd deployProject\nmkdir -p mysql/database\n")),(0,s.kt)("h2",{id:"docker-composeyml-for-mysql"},"docker-compose.yml for mysql"),(0,s.kt)("p",null,"MySQL gets its own docker-compose.yml file. We keep all those files as standard as possible without the need to create Docker images."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.9'\n\nservices:\n\n  db:\n    image: mysql:5.7.36\n    restart: always\n    container_name: mysql\n    environment:\n      MYSQL_DATABASE: nginxindocker_database\n      MYSQL_USER: exampleuser\n      MYSQL_PASSWORD: examplepass\n      MYSQL_RANDOM_ROOT_PASSWORD: '1'\n    volumes:\n      - ./database:/var/lib/mysql\n    ports:\n      - \"8086:3306\"\n    networks:\n      my-net:\n        ipv4_address: 172.30.0.90\n\nnetworks:\n  my-net:\n    external: true\n    name: my-net\n")),(0,s.kt)("h3",{id:"mysql-environment-variables"},"MYSQL Environment variables"),(0,s.kt)("p",null,"The nice people creating the MySQL Docker Image gave us the tools to configure everything with Environment Variables.\nNo need to create our own MySQL Images."),(0,s.kt)("p",null,"For an explanation on the MySQL environment variables, check out the ",(0,s.kt)(o.r,{to:"https://hub.docker.com/_/mysql",mdxType:"Link"},"MySQL Docker Image on Docker Hub")),(0,s.kt)("p",null,"For a simple setup we only need 4 of them:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"MYSQL_DATABASE: nginxindocker_database"),(0,s.kt)("li",{parentName:"ul"},"MYSQL_USER: exampleuser"),(0,s.kt)("li",{parentName:"ul"},"MYSQL_PASSWORD: examplepass"),(0,s.kt)("li",{parentName:"ul"},"MYSQL_RANDOM_ROOT_PASSWORD: '1'")),(0,s.kt)("h3",{id:"security"},"Security"),(0,s.kt)("p",null,"Isn't is a problem to have the database password in the docker-compose.yml file, which will be on Github?"),(0,s.kt)("p",null,"Well, no, it is not a problem. The reason is that the Host should not have username/password access. All ssh access should be done by Public/Private KeyPairs."),(0,s.kt)("p",null,"Paranoia security experts might be disagreeing on this, and I would love to hear their comments.\nIf I'm wrong, I will rectify and change the configuration."),(0,s.kt)("h3",{id:"ports"},"Ports"),(0,s.kt)("p",null,"Interesting here is that the Container port is the default 3306, and the port on the Host for this Database is 8086."),(0,s.kt)("p",null,"This 8086 is NOT used by other services. (See below why we have this port then)\nThe other services connect to the IP address and the internal Port."),(0,s.kt)("h2",{id:"starting-the-mysql-container"},"Starting the MySQL Container"),(0,s.kt)("p",null,"Go in the mysql directory and start the Container with docker-compose"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"$ docker-compose up\n[+] Running 12/12\n \u283f db Pulled                                                                                                                                                                              15.7s\n   \u283f a10c77af2613 Pull complete                                                                                                                                                            4.1s\n   (Many more Pulls)                                                                                                                                                        13.3s\n   \u283f 1c5fd9c3683d Pull complete                                                                                                                                                           13.4s\n   \u283f 2e35f83a12e9 Pull complete                                                                                                                                                           13.4s\n[+] Running 1/1\n \u283f Container mysql  Started                                                                                                                                                                0.7s\nAttaching to mysql\n")),(0,s.kt)("p",null,"Other interesting lines from the log"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mysql  | 2021-11-21 16:46:36+00:00 [Note] [Entrypoint]: Initializing database files\n...\nmysql  | 2021-11-21 16:46:44+00:00 [Note] [Entrypoint]: Database files initialized\n...\nmysql  | 2021-11-21 16:46:47+00:00 [Note] [Entrypoint]: Creating database nginxindocker_database\nmysql  | 2021-11-21 16:46:47+00:00 [Note] [Entrypoint]: Creating user exampleuser\nmysql  | 2021-11-21 16:46:47+00:00 [Note] [Entrypoint]: Giving user exampleuser access to schema nginxindocker_database\n...\nmysql  | 2021-11-21T16:46:50.500496Z 0 [Note] mysqld: ready for connections.\nmysql  | Version: '5.7.36'  socket: '/var/run/mysqld/mysqld.sock'  port: 3306  MySQL Community Server (GPL)\n")),(0,s.kt)("p",null,"The first line shows that a database is created.\nThe reason is that the MySQL Image starting scripts do not see a database in /var/lib/mysql (the database location in the Container).\nTherefore, one is created."),(0,s.kt)("p",null,"Conveniently this location is mapped (by Volumes setting) in the docker-compose file to a directory on the Host (./database).\nSo, the database remains if the container is restarted."),(0,s.kt)("p",null,"If you want a new database, then just delete directory ./database in the mysql directory."),(0,s.kt)("h4",{id:"deleting-a-database"},"Deleting a Database?"),(0,s.kt)("p",null,"Well, when you try to delete those database files, you will notice that they have another permission/owner than your account on the host.\nThis is because you probably have a non-root account on the host, and the MySQL Container does everything under root.\nSo, use sudo to remove thos files."),(0,s.kt)("h3",{id:"network"},"Network"),(0,s.kt)("p",null,"Again, the external network is my-net and this docker-compose needs to attach to it."),(0,s.kt)("p",null,"On the my-net this MySQL Database Container has an IP address of 172.30.0.90."),(0,s.kt)("p",null,"There is no need to add the MySQL Container to the Proxyserver.\nThe reason is that we only access the database from other Containers, not from the Proxyserver."),(0,s.kt)("h2",{id:"showing-results"},"Showing results"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'$ docker ps -a\nCONTAINER ID   IMAGE          COMMAND                  CREATED         STATUS         PORTS                               NAMES\ncd1b870b2039   mysql:5.7.36   "docker-entrypoint.s\u2026"   4 seconds ago   Up 2 seconds   33060/tcp, 0.0.0.0:8086->3306/tcp   mysql\n099e16c935af   nginx:1.21.4   "/docker-entrypoint.\u2026"   2 days ago      Up 2 days      80/tcp                              staticsite\n1f1a282fd9cc   nginx:1.21.4   "/docker-entrypoint.\u2026"   2 days ago      Up 2 days      0.0.0.0:80->80/tcp                  proxyserver\n')),(0,s.kt)("h2",{id:"different-methods-to-access-the-database"},"Different methods to access the database"),(0,s.kt)("p",null,"You can access the database in 4 possible ways:"),(0,s.kt)("h3",{id:"accessing-the-database-on-the-host"},"Accessing the database on the Host"),(0,s.kt)("p",null,"When trying to access the database from the Host, the following connection string is used:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"mysql://exampleuser:examplepass@localhost:8086/nginxindocker_database\n")),(0,s.kt)("p",null,"Notice the port number being 8086 instead of 3306."),(0,s.kt)("p",null,"This means also that if you want to access the database from another system like\nyour laptop to the database running on the Digital Ocean Droplet (or AWS EC2 Instance) in the Container,\nyour SysAdmin needs to open port 8086 on the Host-Firewall."),(0,s.kt)("h3",{id:"accessing-the-database-via-an-ssh-tunnel"},"Accessing the database via an SSH Tunnel"),(0,s.kt)("p",null,"Suppose you want to use the method described above, but your SysAdmin refuses to open port 8086 on the Host.\n(which would make him a very wise SysAdmin)"),(0,s.kt)("p",null,"If you have ssh access to that system via SSH Keys, you could also open an ssh tunnel and access the database locally on your MacBook:"),(0,s.kt)("p",null,"Setting up the tunnel:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -L localhost:9999:hostsystem:8086 username@hostsystem -N\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'"username" is the username you are doing all this work under on the Host system.'),(0,s.kt)("li",{parentName:"ul"},"\"hostsystem\" here is the machine the Containers are running on, our 'host' in this story.")),(0,s.kt)("p",null,"The command basically says:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Create a connection using my Public/Private Key Pair, and after that send all requests on my MacBook to localhost:9999 to hostsystem:8086 over this connection")),(0,s.kt)("p",null,"And your laptop opens a database on localhost:9999."),(0,s.kt)("p",null,"This is, in my view, the best and most secure option. Use JetBrains-DataGrip or any other database management tool on your laptop and use the ssh tunnel to connect."),(0,s.kt)("h3",{id:"accessing-the-database-via-the-proxyserver"},"Accessing the database via the Proxyserver"),(0,s.kt)("p",null,"In case you did not map a Port in the docker-compose file, you could set up the database in the Proxyserver\nand forward the requests to the IP number and internal Port."),(0,s.kt)("p",null,"Which is quite an insecure method in my view."),(0,s.kt)("h3",{id:"use-phpmyadmin"},"Use phpmyadmin"),(0,s.kt)("p",null,"You could also set up a new Docker Container running PHPmyadmin connecting to the database."),(0,s.kt)("p",null,"This is also not an ideal (insecure) situation in my view."))}p.isMDXComponent=!0},9686:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/database-01-2e35138e1e03ff47f5f68843d6c39c73.png"}}]);
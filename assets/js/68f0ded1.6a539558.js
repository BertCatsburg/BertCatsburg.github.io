"use strict";(self.webpackChunkdocusaurus_bertcatsburg=self.webpackChunkdocusaurus_bertcatsburg||[]).push([[552],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(f,l(l({ref:t},p),{},{components:n})):r.createElement(f,l({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[d]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5905:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:4},l="Terraform List Of Maps",i={unversionedId:"terraform-list-and-map/list-of-maps",id:"terraform-list-and-map/list-of-maps",title:"Terraform List Of Maps",description:"Let's go one step further: A list of maps. Again in main.tf in the root module",source:"@site/docs/terraform-list-and-map/04-list-of-maps.mdx",sourceDirName:"terraform-list-and-map",slug:"/terraform-list-and-map/list-of-maps",permalink:"/docs/terraform-list-and-map/list-of-maps",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Terraform List",permalink:"/docs/terraform-list-and-map/list"},next:{title:"Recap",permalink:"/docs/terraform-list-and-map/recap"}},u={},s=[{value:"List of Maps we use",id:"list-of-maps-we-use",level:2},{value:"Get &#39;country&#39; of second element",id:"get-country-of-second-element",level:3},{value:"Output",id:"output",level:4},{value:"Get all Countries, with a for loop",id:"get-all-countries-with-a-for-loop",level:3},{value:"Output",id:"output-1",level:4},{value:"Get all Countries, with a Splat Expression",id:"get-all-countries-with-a-splat-expression",level:3},{value:"Output",id:"output-2",level:4},{value:"Use a Module to handle each element individually",id:"use-a-module-to-handle-each-element-individually",level:2},{value:"Calling the module from main.tf",id:"calling-the-module-from-maintf",level:3},{value:"Inside the Module",id:"inside-the-module",level:3},{value:"Back in root module, main.tf",id:"back-in-root-module-maintf",level:3},{value:"Output",id:"output-3",level:4}],p={toc:s},d="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"terraform-list-of-maps"},"Terraform List Of Maps"),(0,a.kt)("p",null,"Let's go one step further: A list of maps. Again in main.tf in the root module"),(0,a.kt)("h2",{id:"list-of-maps-we-use"},"List of Maps we use"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'variable "LIST_OF_MAPS" {\n  type = list(map(string))\n  default = [\n    {\n      city = "Amsterdam"\n      country = "Netherlands"\n    },\n    {\n      city = "New York"\n      country = "United States of America"\n    },\n    {\n      city = "London"\n      country = "United Kingdom"\n    }\n  ]\n}\n')),(0,a.kt)("h3",{id:"get-country-of-second-element"},"Get 'country' of second element"),(0,a.kt)("p",null,"In Javascript this would be an array of objects, which is very common there."),(0,a.kt)("p",null,"Suppose we need the country of the second element in the list."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'output "LISTMAP_COUNTRY_OF_ELEMENT_2" {\n  value = var.LIST_OF_MAPS[1].country\n}\n')),(0,a.kt)("h4",{id:"output"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'LISTMAP_COUNTRY_OF_ELEMENT_2 = "United States of America"\n')),(0,a.kt)("h3",{id:"get-all-countries-with-a-for-loop"},"Get all Countries, with a for loop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'output "LISTMAP_ALL_COUNTRIES_1" {\n  value = [for i in var.LIST_OF_MAPS: i.country]\n}\n')),(0,a.kt)("h4",{id:"output-1"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'LISTMAP_ALL_COUNTRIES_1 = [\n  "Netherlands",\n  "United States of America",\n  "United Kingdom",\n]\n')),(0,a.kt)("h3",{id:"get-all-countries-with-a-splat-expression"},"Get all Countries, with a Splat Expression"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'output "LISTMAP_ALL_COUNTRIES_2" {\n  value = var.LIST_OF_MAPS.*.country\n}\n')),(0,a.kt)("h4",{id:"output-2"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'LISTMAP_ALL_COUNTRIES_2 = tolist([\n  "Netherlands",\n  "United States of America",\n  "United Kingdom",\n])\n')),(0,a.kt)("h2",{id:"use-a-module-to-handle-each-element-individually"},"Use a Module to handle each element individually"),(0,a.kt)("p",null,"As with the previous examples, here also a Module to handle each element of the List individually"),(0,a.kt)("h3",{id:"calling-the-module-from-maintf"},"Calling the module from main.tf"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'module "LIST_OF_MAPS" {\n  source = "./module_listofmap"\n  count = length(var.LIST_OF_MAPS)\n  LISTOFMAP_ELEMENT = var.LIST_OF_MAPS[count.index]\n}\n')),(0,a.kt)("p",null,"Since this is a List, we use the Count again."),(0,a.kt)("p",null,'Variable passed to the Module is "LISTOFMAP_ELEMENT"',(0,a.kt)("br",null),"\nand the value of that variable is each occurrence on the LIST_OF_MAPS variable."),(0,a.kt)("h3",{id:"inside-the-module"},"Inside the Module"),(0,a.kt)("p",null,'The module, residing in "module_listofmap" subdirectory in a file called main.tf, has the following code:'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'variable "LISTOFMAP_ELEMENT" {\n  type = map(string)\n}\n\noutput "COUNTRY" {\n  value = var.LISTOFMAP_ELEMENT.country\n}\n')),(0,a.kt)("p",null,"It receives a variable which is of type Map (of strings),\nand it sends back to the caller the value of the Country property in that Map."),(0,a.kt)("h3",{id:"back-in-root-module-maintf"},"Back in root module, main.tf"),(0,a.kt)("p",null,"main.tf picks up on that output and sends it back to the screen with an output of its own:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'output "ALL_COUNTRIES" {\n  value = module.LIST_OF_MAPS[*].COUNTRY\n}\n')),(0,a.kt)("h4",{id:"output-3"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'ALL_COUNTRIES = [\n  "Netherlands",\n  "United States of America",\n  "United Kingdom",\n]\n')))}c.isMDXComponent=!0}}]);